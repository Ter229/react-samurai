{"version":3,"file":"static/js/544.bdb775e6.chunk.js","mappings":"yKACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,2B,uBCG5I,MAaA,EAboBA,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UAClCL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIT,EAAKO,SAAER,EAAMW,QAC5B,ECGd,EAPiBX,IAETG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAOE,SAAER,EAAMY,U,kCCGzC,MAkCMC,GAAcC,EAAAA,EAAAA,GAAiB,IAe/BC,GAAqBC,EAAAA,EAAAA,GAAU,CACjCC,KAAM,wBADiBD,EAdHhB,IAEhBkB,EAAAA,EAAAA,MAAA,QAAMC,SAAUnB,EAAMoB,aAAaZ,SAAA,EAC/BL,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,EAASZ,GAAcF,KAAK,iBAAiBe,YAAY,0BAEpGvB,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAAA,UAAAK,SAAQ,gBAWxB,EArDiBR,IAEb,IAAI2B,EAAQ3B,EAAM4B,YAGdC,EAAkBF,EAAMG,QAAQC,KAAIC,IAAK7B,EAAAA,EAAAA,KAAC8B,EAAU,CAACtB,KAAQqB,EAAErB,KAAkBT,GAAM8B,EAAE9B,IAAd8B,EAAE9B,MAC7EgC,EAAmBP,EAAMQ,SAASJ,KAAIK,IAAKjC,EAAAA,EAAAA,KAACkC,EAAO,CAACzB,QAAUwB,EAAExB,SAAewB,EAAElC,MAChEyB,EAAMW,eAQ3B,OAAItC,EAAMuC,QAGNrB,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAEyB,QAAQtB,SAAA,EACtBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEmC,aAAahC,SAC1BqB,KAEL1B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE8B,SAAS3B,UACvBL,EAAAA,EAAAA,KAAA,OAAAK,SAAM0B,OAEV/B,EAAAA,EAAAA,KAACY,EAAmB,CAACI,SAfRsB,IACjBzC,EAAM0C,YAAYD,EAAOH,eAAe,QAIlBnC,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CAACjC,GAAG,UAW7B,E,cC9Bd,IAAIkC,EAA8BjB,IAAK,CACnCY,OAAQZ,EAAMkB,KAAKN,SAIhB,MAAMO,EAAoBC,IAC7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAIC,KAAKnD,MAAMuC,QACRpC,EAAAA,EAAAA,KAAC4C,EAAS,IAAKI,KAAKnD,SADGG,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CAACjC,GAAG,UAE/C,EAMJ,OADqC0C,EAAAA,EAAAA,IAAQR,EAARQ,CAAqCJ,EACrC,E,cCbzC,IAAIK,EAAmB1B,IAEZ,CACHC,YAAaD,EAAMC,cAIvB0B,EAAsBC,IACf,CACHb,YAAcJ,IACViB,GAASC,EAAAA,EAAAA,GAAmBlB,GAAgB,KAQxDmB,EAAAA,EAAAA,KACIL,EAAAA,EAAAA,IAAQC,EAAiBC,GACzBR,EAFJW,CAGEC,GAGF,SAAeD,EAAAA,EAAAA,KACXL,EAAAA,EAAAA,IAAQC,EAAiBC,GACzBR,EAFJ,CAGEY,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/WithAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__EzpoL\",\"dialogsItems\":\"Dialogs_dialogsItems__HOd8d\",\"active\":\"Dialogs_active__rLWwc\",\"messages\":\"Dialogs_messages__BW4PP\"};","import { NavLink } from \"react-router-dom\"\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\nconst DialogItem = (props) =>{\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem","\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\n\r\n\r\nconst Message = (props) =>{\r\n    return(\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React from \"react\"\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validartors/validators\";\r\n\r\n\r\n\r\nconst Dialogs = (props) =>{\r\n    \r\n    let state = props.dialogsPage\r\n\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name = {d.name} key ={d.id} id = {d.id}/> ) \r\n    let messagesElements = state.messages.map(m => <Message message ={m.message} key ={m.id}/> )\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    \r\n    let AddNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    \r\n    \r\n    if(!props.isAuth) return  <Navigate to=\"/login\" />; \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}                      \r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>    \r\n            </div>\r\n            <AddMessageFormRedux onSubmit={AddNewMessage}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required,maxLength50]} name=\"newMessageBody\" placeholder=\"Enter your message\" />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux= reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs","import { Navigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  })\r\n\r\n\r\nexport const withAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Navigate to=\"/login\" />; \r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n   \r\n      \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport React from 'react';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ncompose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"names":["props","path","id","_jsx","className","s","dialog","active","children","NavLink","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","newMessageBody","isAuth","dialogsItems","values","sendMessage","Navigate","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","React","render","this","connect","mapStateToProps","mapDispatchToProps","dispatch","sendMessageCreator","compose","Dialogs"],"sourceRoot":""}